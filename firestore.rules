rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isAdmin() {
      return isAuthenticated() && (
        (request.auth.token.admin == true)
        || (
          exists(/databases/$(database)/documents/users/$(request.auth.uid))
          && (
            get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'owner'
            || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'
          )
        )
      );
    }

    // Manager check: true if caller is admin/owner OR has role=manager for the specific branch
    function isManagerForBranch(branchId) {
      return isAuthenticated() && (
        request.auth.token.admin == true
        || (request.auth.token.role == 'manager' && request.auth.token.branchId == branchId)
        || (
          exists(/databases/$(database)/documents/users/$(request.auth.uid))
          && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'manager'
          && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.branchId == branchId
        )
      );
    }

    // Dashboard access: only owner, admin, and manager roles can access dashboard data
    function canAccessDashboard() {
      return isAuthenticated() && (
        isAdmin()
        || (request.auth.token.role == 'manager')
        || (
          exists(/databases/$(database)/documents/users/$(request.auth.uid))
          && (
            get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'owner'
            || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'
            || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'manager'
          )
        )
      );
    }

    // Cashier check: true if caller is cashier for the specific branch (or higher role)
    function isCashierForBranch(branchId) {
      return isAuthenticated() && (
        isAdmin()
        || isManagerForBranch(branchId)
        || (request.auth.token.role == 'cashier' && request.auth.token.branchId == branchId)
        || (
          exists(/databases/$(database)/documents/users/$(request.auth.uid))
          && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'cashier'
          && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.branchId == branchId
        )
      );
    }

    // Caller is the employee who started the session
    function isSessionStartedByCaller(sessionId) {
      return isAuthenticated()
        && exists(/databases/$(database)/documents/cash_register_sessions/$(sessionId))
        && get(/databases/$(database)/documents/cash_register_sessions/$(sessionId)).data.startedBy == request.auth.uid;
    }

    function sameAccount(resourceAccountId) {
      return isAuthenticated()
        && (
          (request.auth.token.accountId != null && request.auth.token.accountId == resourceAccountId)
          || (
            exists(/databases/$(database)/documents/users/$(request.auth.uid))
            && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.accountId == resourceAccountId
          )
        );
    }

    function getAccountIdFromSessionId(sessionId) {
      return sessionId.split('_')[1];
    }

    function isActiveId(id) {
      return id.matches('active_.*');
    }
    
    function isValidSessionId(id) {
      return id.matches('active_.*') || id.matches('session_.*');
    }

    // --- Collection Rules ---

    match /cash_register_sessions/{sessionId} {
      // Read rules: Allow reading for authenticated users in same account
      // Admin can read all, others can read their account's sessions
      allow read, list: if isAuthenticated() && (
        isAdmin()
        || (
          resource != null 
          && sameAccount(resource.data.accountId) 
          && (
            isCashierForBranch(resource.data.branchId) 
            || isManagerForBranch(resource.data.branchId)
            || request.auth.uid == resource.data.startedBy
          )
        )
        // Allow reading sessions that don't exist yet (for transactions)
        || (
          resource == null 
          && isAuthenticated()
          && (
            request.auth.token.accountId != null
            || (
              exists(/databases/$(database)/documents/users/$(request.auth.uid))
              && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.accountId != null
            )
          )
        )
      );

      // Create: authenticated users may create sessions with valid IDs
      // - "session_*" IDs for actual cash register sessions
      // - "active_*" IDs for pointer documents that reference the active session
      allow create: if isAuthenticated()
        && isValidSessionId(sessionId)
        && sameAccount(request.resource.data.accountId)
        && (
          isAdmin() 
          || isManagerForBranch(request.resource.data.branchId) 
          || isCashierForBranch(request.resource.data.branchId)
        )
        && (
          // For actual session documents
          (
            sessionId.matches('session_.*')
            && request.resource.data.status == 'open'
            && request.resource.data.startedBy == request.auth.uid
          )
          // For active pointer documents
          || (
            sessionId.matches('active_.*')
            && request.resource.data.activeSessionId != null
          )
        );
      // Update: allow when admin OR manager for branch OR cashier for branch OR the session owner acting while session is open
      // Also allow updates when creating sessions (tx.set on existing documents)
      allow update: if isAuthenticated() && (
        isAdmin()
        || (
          sameAccount(request.resource.data.accountId) && (
            isManagerForBranch(request.resource.data.branchId)
            || isCashierForBranch(request.resource.data.branchId)
            || request.auth.uid == request.resource.data.startedBy
          )
        )
        || (
          resource.exists() && sameAccount(resource.data.accountId) && resource.data.status == 'open' && (
            isSessionStartedByCaller(sessionId) 
            || isManagerForBranch(resource.data.branchId)
            || isCashierForBranch(resource.data.branchId)
          )
        )
      );

      // Deletes only for admins
      allow delete: if isAdmin();
      
      // Allow verify operations for transactions
      allow get: if isAuthenticated() && (
        isAdmin()
        || (
          resource != null 
          && sameAccount(resource.data.accountId) 
          && (
            isCashierForBranch(resource.data.branchId) 
            || isManagerForBranch(resource.data.branchId)
            || request.auth.uid == resource.data.startedBy
          )
        )
        // Allow reading sessions that don't exist yet (for transactions)
        || (
          resource == null 
          && isAuthenticated()
          && (
            request.auth.token.accountId != null
            || (
              exists(/databases/$(database)/documents/users/$(request.auth.uid))
              && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.accountId != null
            )
          )
        )
      );
    }

    match /cash_register_movements/{movementId} {
      // Create: only allowed if session exists and caller is allowed to act on that session
      allow create: if isAuthenticated()
        && exists(/databases/$(database)/documents/cash_register_sessions/$(request.resource.data.sessionId))
        && (
          isAdmin()
          || isSessionStartedByCaller(request.resource.data.sessionId)
          || (
            isManagerForBranch(get(/databases/$(database)/documents/cash_register_sessions/$(request.resource.data.sessionId)).data.branchId)
            || isCashierForBranch(get(/databases/$(database)/documents/cash_register_sessions/$(request.resource.data.sessionId)).data.branchId)
          )
        )
        && request.resource.data.accountId == get(/databases/$(database)/documents/cash_register_sessions/$(request.resource.data.sessionId)).data.accountId;

      // Read movements: determine access by inspecting the parent session document
      allow read: if isAuthenticated() && (
        isAdmin()
        || (
          exists(/databases/$(database)/documents/cash_register_sessions/$(resource.data.sessionId))
          && (
            // manager or cashier for branch
            (
              (isManagerForBranch(get(/databases/$(database)/documents/cash_register_sessions/$(resource.data.sessionId)).data.branchId) 
               || isCashierForBranch(get(/databases/$(database)/documents/cash_register_sessions/$(resource.data.sessionId)).data.branchId))
              && sameAccount(get(/databases/$(database)/documents/cash_register_sessions/$(resource.data.sessionId)).data.accountId)
            )
            // session owner
            || (get(/databases/$(database)/documents/cash_register_sessions/$(resource.data.sessionId)).data.startedBy == request.auth.uid)
          )
        )
      );

      allow update, delete: if isAdmin();
    }

    match /cash_register_reports/{reportId} {
      // Reports are created at close time. Creation allowed if caller belonged to the account (closed session) or admin.
      allow create: if isAuthenticated() && (
        isAdmin()
        || (request.resource.data.sessionSnapshot != null && sameAccount(request.resource.data.sessionSnapshot.accountId))
      );

      // Read: admin sees all; manager sees branch reports; cashier sees reports for their branch too
      allow read, list: if isAuthenticated() && (
        isAdmin()
        || (
          resource.data != null && sameAccount(resource.data.accountId) && (
            isManagerForBranch(resource.data.sessionSnapshot.branchId)
            || isCashierForBranch(resource.data.sessionSnapshot.branchId)
          )
        )
        || (resource.data != null && resource.data.sessionSnapshot != null && resource.data.sessionSnapshot.startedBy == request.auth.uid)
        // Allow queries by authenticated users (resource may not exist during queries)
        || (
          request.auth.token.accountId != null
          || (
            exists(/databases/$(database)/documents/users/$(request.auth.uid))
            && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.accountId != null
          )
        )
      );

      allow update, delete: if isAdmin();
    }

    match /users/{userId} {
      allow read: if isAuthenticated() && (request.auth.uid == userId || isAdmin() || sameAccount(resource.data.accountId));
      allow create: if false;
      allow update: if isAuthenticated() && request.auth.uid == userId && !('role' in request.resource.data) && !('accountId' in request.resource.data);
      allow update, delete: if isAdmin();
    }

    match /products/{productId} {
      allow read, list: if isAuthenticated() && (
        isAdmin() 
        || (
          resource.exists() && sameAccount(resource.data.accountId)
        )
        // Allow queries by authenticated users (resource may not exist during queries)
        || (
          request.auth.token.accountId != null
          || (
            exists(/databases/$(database)/documents/users/$(request.auth.uid))
            && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.accountId != null
          )
        )
      );
      allow create, delete: if isAdmin();
      // Allow stock updates for cashiers and managers (for sales transactions)
      // Products don't have branchId field, they have accountId and stock per branch
      allow update: if isAuthenticated() && (
        isAdmin()
        || (
          sameAccount(request.resource.data.accountId)
          // Only allow updating the stock field
          && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['stock'])
        )
      );
    }

    match /sales/{saleId} {
      allow read, list: if isAuthenticated() && (
        isAdmin() 
        || (
          resource.exists() && sameAccount(resource.data.accountId) && (
            isManagerForBranch(resource.data.branchId)
            || isCashierForBranch(resource.data.branchId)
          )
        )
        // Allow queries by authenticated users (resource may not exist during queries)
        || (
          request.auth.token.accountId != null
          || (
            exists(/databases/$(database)/documents/users/$(request.auth.uid))
            && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.accountId != null
          )
        )
      );
      allow create: if isAuthenticated() && sameAccount(request.resource.data.accountId) && (
        isAdmin()
        || isManagerForBranch(request.resource.data.branchId)
        || isCashierForBranch(request.resource.data.branchId)
      );
      allow update, delete: if isAdmin();
    }

    match /branches/{branchId} {
      allow read, list: if isAuthenticated() && (
        isAdmin() 
        || (
          resource.exists() && sameAccount(resource.data.accountId) && (
            isCashierForBranch(branchId)
            || isManagerForBranch(branchId)
          )
        )
        // Allow queries by authenticated users (resource may not exist during queries)
        || (
          request.auth.token.accountId != null
          || (
            exists(/databases/$(database)/documents/users/$(request.auth.uid))
            && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.accountId != null
          )
        )
      );
      allow create, update, delete: if isAdmin();
    }

    match /customers/{customerId} {
      allow read, list: if isAuthenticated() && (
        isAdmin() 
        || (resource.exists() && sameAccount(resource.data.accountId))
        // Allow queries by authenticated users (resource may not exist during queries)
        || (
          request.auth.token.accountId != null
          || (
            exists(/databases/$(database)/documents/users/$(request.auth.uid))
            && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.accountId != null
          )
        )
      );
      allow create, update, delete: if isAuthenticated() && sameAccount(request.resource.data.accountId);
    }

    match /settings/{docId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }

    match /discount_settings/{accountId} {
      allow read: if isAuthenticated() && (isAdmin() || sameAccount(accountId));
      allow write: if isAdmin() || (isAuthenticated() && sameAccount(accountId));
    }

    match /accounts/{accountId} {
      allow read: if isAuthenticated() && (isAdmin() || sameAccount(accountId));
      allow write: if isAdmin();
    }

    match /sale_counters/{counterId} {
      // Counter ID format: accountId_branchId
      // Allow read/write for authenticated users in the same account
      allow read, create, update: if isAuthenticated() && (
        isAdmin()
        || (
          // Check if the counter belongs to the user's account
          // We'll validate this in the application code instead of parsing the ID here
          request.auth.token.accountId != null
          || (
            exists(/databases/$(database)/documents/users/$(request.auth.uid))
            && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.accountId != null
          )
        )
      );
      allow delete: if isAdmin();
    }

    match /transfers/{transferId} {
      // Read transfers: admin or users in same account who are managers/cashiers for relevant branches
      allow read, list: if isAuthenticated() && (
        isAdmin()
        || (
          resource.exists() && sameAccount(resource.data.accountId) && (
            // Manager or cashier for source branch (can see outgoing transfers)
            isManagerForBranch(resource.data.sourceBranchId)
            || isCashierForBranch(resource.data.sourceBranchId)
            // Manager or cashier for destination branch (can see incoming transfers)
            || isManagerForBranch(resource.data.destinationBranchId)
            || isCashierForBranch(resource.data.destinationBranchId)
          )
        )
        // Allow queries by authenticated users (resource may not exist during queries)
        || (
          request.auth.token.accountId != null
          || (
            exists(/databases/$(database)/documents/users/$(request.auth.uid))
            && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.accountId != null
          )
        )
      );

      // Create transfers: cashiers and managers can create transfers from their branch
      allow create: if isAuthenticated() && sameAccount(request.resource.data.accountId) && (
        isAdmin()
        || isManagerForBranch(request.resource.data.sourceBranchId)
        || isCashierForBranch(request.resource.data.sourceBranchId)
      ) && (
        // Initial status must be 'pending'
        request.resource.data.status == 'pending'
        // Requesting user must be set
        && request.resource.data.requestedBy == request.auth.uid
      );

      // Update transfers: only managers can approve/reject, and only for their branch
      // Anyone involved can update status to 'in_transit' or 'completed'
      allow update: if isAuthenticated() && sameAccount(request.resource.data.accountId) && (
        isAdmin()
        || (
          // Managers can approve/reject transfers coming to their branch
          (
            (request.resource.data.status == 'approved' || request.resource.data.status == 'rejected')
            && resource.data.status == 'pending'
            && isManagerForBranch(resource.data.destinationBranchId)
          )
          // Cashiers/managers from source branch can mark as in_transit
          || (
            request.resource.data.status == 'in_transit'
            && resource.data.status == 'approved'
            && (
              isManagerForBranch(resource.data.sourceBranchId)
              || isCashierForBranch(resource.data.sourceBranchId)
            )
          )
          // Cashiers/managers from destination branch can mark as completed
          || (
            request.resource.data.status == 'completed'
            && resource.data.status == 'in_transit'
            && (
              isManagerForBranch(resource.data.destinationBranchId)
              || isCashierForBranch(resource.data.destinationBranchId)
            )
          )
        )
      );

      // Delete transfers: only admins can delete
      allow delete: if isAdmin();
    }

    match /reservations/{reservationId} {
      // Read reservations: admin or users in same account who are managers/cashiers for the branch
      allow read, list: if isAuthenticated() && (
        isAdmin()
        || (
          resource.exists() && sameAccount(resource.data.accountId) && (
            isManagerForBranch(resource.data.branchId)
            || isCashierForBranch(resource.data.branchId)
            || request.auth.uid == resource.data.createdBy
          )
        )
        // Allow queries by authenticated users (resource may not exist during queries)
        || (
          request.auth.token.accountId != null
          || (
            exists(/databases/$(database)/documents/users/$(request.auth.uid))
            && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.accountId != null
          )
        )
      );

      // Create reservations: cashiers and managers can create reservations for their branch
      allow create: if isAuthenticated() && sameAccount(request.resource.data.accountId) && (
        isAdmin()
        || isManagerForBranch(request.resource.data.branchId)
        || isCashierForBranch(request.resource.data.branchId)
      ) && (
        // Creating user must be set correctly
        request.resource.data.createdBy == request.auth.uid
        // Customer name is required
        && request.resource.data.customerName != null
        && request.resource.data.customerName != ""
      );

      // Update reservations: managers/cashiers for the branch can update status, admin can do anything
      allow update: if isAuthenticated() && sameAccount(request.resource.data.accountId) && (
        isAdmin()
        || (
          (
            isManagerForBranch(resource.data.branchId)
            || isCashierForBranch(resource.data.branchId)
          )
          && (
            // Can update status from pending to cancelled or completed
            (
              resource.data.status == 'pending' 
              && (
                request.resource.data.status == 'cancelled' 
                || request.resource.data.status == 'completed'
                || request.resource.data.status == 'expired'
              )
            )
            // Can update other fields while status remains the same or transitions are valid
            || request.resource.data.status == resource.data.status
          )
        )
      );

      // Delete reservations: only admins can delete
      allow delete: if isAdmin();
    }
  }
}
