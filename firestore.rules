rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isAdmin() {
      return isAuthenticated() && (
        (request.auth.token.admin == true)
        || (
          exists(/databases/$(database)/documents/users/$(request.auth.uid))
          && (
            get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'owner'
            || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'
          )
        )
      );
    }

    function sameAccount(resourceAccountId) {
      return isAuthenticated()
        && (
          (request.auth.token.accountId != null && request.auth.token.accountId == resourceAccountId)
          || (
            exists(/databases/$(database)/documents/users/$(request.auth.uid))
            && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.accountId == resourceAccountId
          )
        );
    }

    function getAccountIdFromSessionId(sessionId) {
      return sessionId.split('_')[1];
    }

    function isActiveId(id) {
      return id.matches('active_.*');
    }

    // --- Collection Rules ---

    match /cash_register_sessions/{sessionId} {
      allow read: if isAuthenticated() && (isAdmin() || sameAccount(getAccountIdFromSessionId(sessionId)));
      
      allow create: if isAuthenticated()
        && isActiveId(sessionId)
        && request.resource.data.status == 'open'
        && sameAccount(request.resource.data.accountId);

      allow update: if isAuthenticated() && (isAdmin() || (sameAccount(resource.data.accountId) && resource.data.status == 'open'));

      allow delete: if false;
    }

    match /cash_register_movements/{movementId} {
      allow create: if isAuthenticated()
        && exists(/databases/$(database)/documents/cash_register_sessions/$(request.resource.data.sessionId))
        && sameAccount(get(/databases/$(database)/documents/cash_register_sessions/$(request.resource.data.sessionId)).data.accountId)
        && request.resource.data.accountId == get(/databases/$(database)/documents/cash_register_sessions/$(request.resource.data.sessionId)).data.accountId;

      allow read: if isAuthenticated() && (isAdmin() || sameAccount(resource.data.accountId));
      allow update, delete: if isAdmin();
    }

    match /cash_register_reports/{reportId} {
      allow create: if isAuthenticated() && sameAccount(request.resource.data.sessionSnapshot.accountId);
      allow read: if isAuthenticated() && (isAdmin() || sameAccount(resource.data.accountId));
      allow update, delete: if isAdmin();
    }

    match /users/{userId} {
      allow read: if isAuthenticated() && (request.auth.uid == userId || isAdmin() || sameAccount(resource.data.accountId));
      allow create: if false;
      allow update: if isAuthenticated() && request.auth.uid == userId && !('role' in request.resource.data) && !('accountId' in request.resource.data);
      allow update, delete: if isAdmin();
    }

    match /products/{productId} {
      allow read, list: if isAuthenticated() && (isAdmin() || sameAccount(resource.data.accountId));
      allow create, update, delete: if isAdmin();
    }

    match /sales/{saleId} {
      allow read: if isAuthenticated() && (isAdmin() || sameAccount(resource.data.accountId));
      allow create: if isAuthenticated() && sameAccount(request.resource.data.accountId);
      allow update, delete: if isAdmin();
    }

    match /branches/{branchId} {
      allow read: if isAuthenticated() && (isAdmin() || sameAccount(resource.data.accountId));
      allow create, update, delete: if isAdmin();
    }

    match /customers/{customerId} {
      allow read: if isAuthenticated() && (isAdmin() || sameAccount(resource.data.accountId));
      allow create, update, delete: if isAuthenticated() && sameAccount(request.resource.data.accountId);
    }

    match /settings/{docId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }

    match /accounts/{accountId} {
      allow read: if isAuthenticated() && (isAdmin() || sameAccount(accountId));
      allow write: if isAdmin();
    }
  }
}
